#ifndef font_h
#define font_h
#include <map>
#include <array>
#include <my/out.h>
#include <gl/gl.h>
namespace font {
	typedef double drawtype;
	const int length = 12,width = 8;
	float oneblock = 0.005f;
	struct font_node {
		int font[length][width];
		void set(int** x,int l=length) {
			for(int i=0; i<width*l; ++i) font[i/width][i%width]=x[i/width][i%width];
			for(int i=width*l; i<length*width; ++i) font[i/width][i%width]=0;
		}
		void set(std::initializer_list<std::initializer_list<int>> list) {
//			fout << "set : " << std::endl;
			int rows = list.size();
			int cols = (rows > 0) ? list.begin()->size() : 0;

			int** data = new int*[rows];
			for (int i = 0; i < rows; ++i) {
				data[i] = new int[cols];
				int j = 0;
				for (int value : *(list.begin() + i)) {
					data[i][j++] = value;
//					fout << value << ", ";
				}
//				fout << std::endl;
			}

			set(data);

			delete[] data;
		}
	};
	std::map<char,font_node> mp;


	void init();


}

//functions
struct vec2 {
	font::drawtype x,y;
};
inline bool out(font::drawtype x,font::drawtype y) {
	return x<-1||x>1||y<-1||y>1;
//	return 0;
}
inline bool out(vec2 v) {
	return out(v.x,v.y);
//	return 0;
}
void drawraw(font::drawtype x,font::drawtype y,float wid, int height, int width) {
//	fout << "[Note] Drawing raw at (" << x << ", " << y << ") with wid=" << wid << std::endl;
	vec2 lu_,ru_,ld_,rd_;
	if(height < width)
		lu_= {(x), (y+wid)*width*1.0/height},ru_ = {(x+wid), (y+wid)*width*1.0/height},
		ld_ = {(x), (y)*width*1.0/height},rd_ = {(x+wid), (y*width*1.0/height)};
	else
		lu_ = {(x)*height*1.0/width, (y+wid)},ru_= {(x+wid)*height*1.0/width, (y+wid)},
		ld_= {(x)*height*1.0/width, (y)},rd_ = {(x+wid)*height*1.0/width, (y)};
	vec2 lu(lu_),ru(ru_),ld(ld_),rd(rd_);
	if(!(out(lu)&&out(ru)&&out(ld)&&out(rd))) {
		glPushMatrix ();
		glBegin (GL_TRIANGLES);
		glColor3f (1.0f, 1.0f, 1.0f);
		glVertex2f (ld.x, ld.y);
		glColor3f (1.0f, 1.0f, 1.0f);
		glVertex2f (rd.x, rd.y);
		glColor3f (1.0f, 1.0f, 1.0f);
		glVertex2f (ru.x, ru.y);
		glEnd ();

		glPopMatrix ();
		glPushMatrix ();

		glBegin (GL_TRIANGLES);
		glColor3f (1.0f, 1.0f, 1.0f);
		glVertex2f (ld.x, ld.y);
		glColor3f (1.0f, 1.0f, 1.0f);
		glVertex2f (lu.x, lu.y);
		glColor3f (1.0f, 1.0f, 1.0f);
		glVertex2f (ru.x, ru.y);
		glEnd ();
		glPopMatrix ();
	}
}

void drawchar(font::drawtype x,font::drawtype y,char c,int height,int width) {
	fout << "[Note] Drawing char " << c << " at (" << x << ", " << y << ")\n";
	if(font::mp.find(c) == font::mp.end()) {
		fout << "[Warn] Cannot find font for char " << c << std::endl;
		return;
	}
	for(int i=0; i<font::length; ++i) {
		for(int j=0; j<font::width; ++j) {
			if(font::mp[c].font[i][j] == 1) {
				drawraw(x+(j*font::oneblock),(y-(i*font::oneblock)),font::oneblock,height,width);				
//				if(height < width)
//					drawraw(x+(j*font::oneblock),(y-(i*font::oneblock))*width*1.0/height,font::oneblock,height,width);
//				else
//					drawraw((x+(j*font::oneblock))*height*1.0/width,(y-(i*font::oneblock)),font::oneblock,height,width);
			}
		}
	}
}
void drawstring(font::drawtype x,font::drawtype y,std::string s, int height, int width) {
	for(int i=0; i<s.size(); ++i) {
		if(height < width) {
//			drawchar((x+i*font::oneblock*font::width),y*width*1.0/height,s[i],height,width);
			drawchar((x+i*font::oneblock*font::width),y,s[i],height,width);
//			fout << time() << "[Note] drawstring modifies y: *= " << width*1.0/height << std::endl;
		} else {
			drawchar((x+i*font::oneblock*font::width)*height*1.0/width,y,s[i],height,width);
//			fout << time() << "[Note] drawstring modifies x: *= " << height*1.0/width << std::endl;
		}
	}
}

void font::init() {
	using namespace font;
	mp['0'].set({
		{0,0,1,1,1,1,0,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,0,1,1,1,1,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['1'].set({
		{0,0,0,0,1,0,0,0},
		{0,0,0,1,1,0,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,1,1,1,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['2'].set({
		{0,0,1,1,1,1,0,0},
		{0,1,0,0,0,0,1,0},
		{0,0,0,0,0,1,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,1,0,0,0,0},
		{0,0,1,0,0,0,0,0},
		{0,1,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['3'].set({
		{0,0,1,1,1,1,0,0},
		{0,1,0,0,0,0,1,0},
		{0,0,0,0,0,0,1,0},
		{0,0,0,0,1,1,0,0},
		{0,0,0,0,0,0,1,0},
		{0,0,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,0,1,1,1,1,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['4'].set({
		{0,0,0,0,1,0,0,0},
		{0,0,0,1,1,0,0,0},
		{0,0,1,0,1,0,0,0},
		{0,1,0,0,1,0,0,0},
		{0,1,1,1,1,1,1,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['5'].set({
		{0,1,1,1,1,1,1,0},
		{0,1,0,0,0,0,0,0},
		{0,1,1,1,1,1,0,0},
		{0,0,0,0,0,0,1,0},
		{0,0,0,0,0,0,1,0},
		{0,0,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,0,1,1,1,1,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['6'].set({
		{0,0,1,1,1,1,0,0},
		{0,1,0,0,0,0,0,0},
		{0,1,0,0,0,0,0,0},
		{0,1,1,1,1,1,0,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,0,1,1,1,1,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['7'].set({
		{0,1,1,1,1,1,1,0},
		{0,1,0,0,0,0,1,0},
		{0,0,0,0,0,0,1,0},
		{0,0,0,0,0,1,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['8'].set({
		{0,0,1,1,1,1,0,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,0,1,1,1,1,0,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,0,1,1,1,1,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['9'].set({
		{0,0,1,1,1,1,0,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,0,1,1,1,1,1,0},
		{0,0,0,0,0,0,1,0},
		{0,0,0,0,0,0,1,0},
		{0,0,0,0,0,0,1,0},
		{0,0,1,1,1,1,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['.'].set({
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,1,1,0,0,0},
		{0,0,0,1,1,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['U'].set({
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,0,1,1,1,1,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['p'].set({
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,1,1,1,1,1,0,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,1,1,1,1,0,0},
		{0,1,0,0,0,0,0,0},
		{0,1,0,0,0,0,0,0},
		{0,1,0,0,0,0,0,0},
		{0,1,0,0,0,0,0,0}
	});
	mp['d'].set({
		{0,0,0,0,0,0,1,0},
		{0,0,0,0,0,0,1,0},
		{0,0,0,0,0,0,1,0},
		{0,0,1,1,1,1,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,0,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['D'].set({
		{0,1,1,1,1,1,0,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,0,0,0,0,1,0},
		{0,1,1,1,1,1,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['r'].set({
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,1,1,1,1,1,0,0},
		{0,0,1,0,0,0,1,0},
		{0,0,1,0,0,0,0,0},
		{0,0,1,0,0,0,0,0},
		{0,0,1,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['w'].set({
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,1,0,0,1,0,0,1},
		{0,1,0,0,1,0,0,1},
		{0,1,0,0,1,0,0,1},
		{0,1,0,0,1,0,0,1},
		{0,0,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['s'].set({
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,1,1,1,1,1,0},
		{0,1,0,0,0,0,0,0},
		{0,0,1,1,1,1,0,0},
		{0,0,0,0,0,0,1,0},
		{0,0,1,1,1,1,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['e'].set({
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,1,1,1,1,0,0},
		{0,1,0,0,0,0,1,0},
		{0,1,1,1,1,1,0,0},
		{0,1,0,0,0,0,0,0},
		{0,0,1,1,1,1,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['c'].set({
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,1,1,1,1,1,0},
		{0,1,0,0,0,0,0,0},
		{0,1,0,0,0,0,0,0},
		{0,1,0,0,0,0,0,0},
		{0,0,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp[':'].set({
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,1,1,0,0,0},
		{0,0,0,1,1,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,1,1,0,0,0},
		{0,0,0,1,1,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['f'].set({
		{0,0,0,0,1,1,0,0},
		{0,0,0,1,0,0,0,0},
		{0,0,0,1,0,0,0,0},
		{0,1,1,1,1,1,1,0},
		{0,0,0,1,0,0,0,0},
		{0,0,0,1,0,0,0,0},
		{0,0,0,1,0,0,0,0},
		{0,0,0,1,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['t'].set({
		{0,0,0,1,0,0,0,0},
		{0,0,0,1,0,0,0,0},
		{0,0,0,1,0,0,0,0},
		{0,1,1,1,1,1,1,0},
		{0,0,0,1,0,0,0,0},
		{0,0,0,1,0,0,0,0},
		{0,0,0,1,0,0,0,0},
		{0,0,0,0,1,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['-'].set({
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,1,1,1,1,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['N'].set({
		{0,1,0,0,0,0,1,0},
		{0,1,1,0,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,1,0,0,1,0},
		{0,1,0,0,1,0,1,0},
		{0,1,0,0,1,0,1,0},
		{0,1,0,0,0,1,1,0},
		{0,1,0,0,0,0,1,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
	mp['x'].set({
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,1,0,0,0,0,1,0},
		{0,0,1,0,0,1,0,0},
		{0,0,0,1,1,0,0,0},
		{0,0,1,0,0,1,0,0},
		{0,1,0,0,0,0,1,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0},
		{0,0,0,0,0,0,0,0}
	});
}
#endif
